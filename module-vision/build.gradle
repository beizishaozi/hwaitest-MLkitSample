apply plugin: 'com.android.application'

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.mlkit.sample.vision"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 3200300
        versionName "3.2.0.300"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            //abiFilters rootProject.ext.abiFilters.split(",")
            abiFilters 'arm64-v8a'
        }
        externalNativeBuild {
            cmake {
                abiFilters rootProject.ext.abiFilters.split(",")
                if (rootProject.ext.dependencyOnLocalLibrary) {
                    arguments "-DDEPENDENCY_ON_LOCAL_LIBRARY=ON"
                }
            }
        }
    }

    externalNativeBuild{
        cmake {
            path "src/main/jni/CMakeLists.txt"
            version rootProject.ext.cmakeVersion
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    if (!rootProject.ext.dependencyOnLocalLibrary) {
        buildFeatures {
            prefab true
        }
    }
    packagingOptions {
        pickFirst '**/libbytehook.so'
    }
    if (rootProject.ext.useASAN) {
        packagingOptions {
            doNotStrip "**/*.so"
        }
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    lintOptions {
        disable 'GoogleAppIndexingWarning'
        checkReleaseBuilds false
        abortOnError false
    }
    
    aaptOptions {
        noCompress "mslite", "ms"
    }

    sourceSets{
        main{
            jniLibs.srcDirs = ['libs']
        }
    }
    ndkVersion '23.1.7779620'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.aar','*.jar'])

    implementation 'com.huawei.hms:ml-computer-vision-cloud:2.0.5.300'

    // image segmentation
    implementation 'com.huawei.hms:ml-computer-vision-segmentation:2.2.0.300'
    implementation 'com.huawei.hms:ml-computer-vision-image-segmentation-body-model:2.2.0.300'
    implementation 'com.huawei.hms:ml-computer-vision-image-segmentation-multiclass-model:2.2.0.300'
    implementation 'com.huawei.hms:ml-computer-vision-image-segmentation-hair-model:2.2.0.300'

    // classification
    implementation 'com.huawei.hms:ml-computer-vision-classification:2.0.1.300'
    implementation 'com.huawei.hms:ml-computer-vision-image-classification-model:2.0.1.300'

    // object detection
    implementation 'com.huawei.hms:ml-computer-vision-object-detection-model:2.0.3.301'

    // image super resolution
    implementation'com.huawei.hms:ml-computer-vision-imagesuperresolution:2.0.4.300'
    implementation'com.huawei.hms:ml-computer-vision-imagesuperresolution-model:2.0.4.300'

    // text image super resolution
    implementation'com.huawei.hms:ml-computer-vision-textimagesuperresolution:2.0.4.300'
    implementation'com.huawei.hms:ml-computer-vision-textimagesuperresolution-model:2.0.4.300'

    //product-visual-search-plugin
    implementation 'com.huawei.hms:ml-product-visual-search-plugin:2.0.3.300'

    // scene detection
    implementation 'com.huawei.hms:ml-computer-vision-scenedetection:2.0.3.300'
    implementation 'com.huawei.hms:ml-computer-vision-scenedetection-model:2.0.3.300'

    // form recognition
    implementation 'com.huawei.hms:ml-computer-vision-formrecognition-model:2.2.0.300'
    implementation 'com.huawei.hms:ml-computer-vision-formrecognition:2.2.0.300'

    // Document skew correction.
    implementation 'com.huawei.hms:ml-computer-vision-documentskew:2.1.0.300'
    implementation 'com.huawei.hms:ml-computer-vision-documentskew-model:2.1.0.300'

    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta4'
    implementation 'it.sephiroth.android.library.imagezoom:imagezoom:2.3.0'
    implementation 'com.github.bumptech.glide:glide:4.11.0'

    if (rootProject.ext.dependencyOnLocalLibrary) {
        implementation project(':bytehook')
    } else {
        implementation 'com.bytedance:bytehook:1.0.4'
    }
}
apply plugin: 'com.huawei.agconnect'
